import pytest

from eth.vm.forks.cancun.eof import EOFContainerV1
from hexbytes import HexBytes


@pytest.mark.parametrize(
    "eof_bytecode",
    [
        HexBytes("0xef000101000402000100030300010000000001305000ef"),
        HexBytes("0xef0001010014020005000100050005000100010300040000000000000000020000000200000000000000000060006000f360006000fdfeb10bad60a7"),  # noqa: E501
        HexBytes("0xef0001010004020001000d030004000000000160015e020002000030503050000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010008020002000300030300040000000001010100013050005030000bad60a7"),  # noqa: E501
        HexBytes("0xef000101000802000200040002030004000000000100010001b000010030b10bad60a7"),  # noqa: E501
        HexBytes("0xef000101000c0200030028000b001f03000400000003ff000a000a00640064b00002b00002b00002b00002b00002b00002b00002b00002b00002b00002b00001b000013030300030303030303030303030b1b00001b00001b00001b00001b00001b00001b00001b00001b00001b00001b10bad60a7"),  # noqa: E501
        HexBytes("0xef0001010010020004000300030003000303000400000000010101000100000001010100013050005030003050005030000bad60a7"),  # noqa: E501
        HexBytes("0xef000101001002000400030005000700070300040000000001000000020000000300000001305000303050500030303050505000305030503050000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010008020002000300030300040000000001020000023050005050000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010004020001000303000400000000013050fe0bad60a7"),
        HexBytes("0xef0001010004020001000a030016000000000338600060003938601df3ef0001010004020001000303001d0000000001385000"),  # noqa: E501
        HexBytes("0xef0001010004020001000a03000400000000005c00035c00035cfffa000bad60a7"),  # noqa: E501
        HexBytes("0xef00010100040200010007030004000000000160015d00015b000bad60a7"),
        HexBytes("0xef00010100040200010008030004000000000260015d0001305b000bad60a7"),
        HexBytes("0xef0001010004020001000303000400000000013050000bad60a7"),
        HexBytes("0xef0001010004020001000403000100000000016001ff00ef"),
        HexBytes("0xef0001010004020001001003000100000000016001600260036004600560066007f200ef"),  # noqa: E501
        HexBytes("0xef000101000802000200040002030004000000000101000001b000010050b10bad60a7"),  # noqa: E501
        HexBytes("0xef0001010008020002000300030300040000000001010000013050005050000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010008020002000300030300040000000001000100013050003030000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010008020002000300030300040000000001010100013050003091000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010004020001000303000400010000013050fe0bad60a7"),
        HexBytes("0xef0001010004020001000303000400000100013050fe0bad60a7"),
        HexBytes("0xef0001010004020001000303000400000000033050000bad60a7"),
        HexBytes("0xef0001010004020001000503000400000000005c00015b000bad60a7"),
    ],
)
def test_eof_model(eof_bytecode):
    eof = EOFContainerV1.from_bytecode(eof_bytecode)

    assert eof.size == len(eof_bytecode)  # test `size` property

    eof_as_bytecode = eof.as_bytecode()  # test `as_bytecode()`
    assert eof_as_bytecode == eof_bytecode


@pytest.mark.parametrize(
    "invalid_eof_bytecode",
    [
        # `header.data_size` does not match `len(body.data_section)`
        HexBytes("0xef0001010004020001000303000400000000013050000bad"),
        HexBytes("0xef000101001002000400030005000700070300040000000001000000000000000300000001305000b000020030303050505000305030503050000bad60a7"),  # noqa: E501
        HexBytes("0xef000101000402000100040300010000000007"),
        HexBytes("0xef000101001002000400030005000700070300040000000001000000020000000300000001305000b0000f0030303050505000305030503050000bad60a7"),  # noqa: E501
        HexBytes("0xef00010100040300010000000001305000ef"),

        # empty jump table
        HexBytes("0xef00010100040200010009030004000000000160015e0030503050000bad60a7"),

        # "relative jump destination targets immediate"
        HexBytes("0xef0001010004020001000d030004000000000160015e020002ffff30503050000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010004020001000a03000400000000005c00035c00025cfffa000bad60a7"),  # noqa: E501
        HexBytes("0xef0001010004020001001003000400000000036000600060005d00035d00025dfffa000bad60a7"),  # noqa: E501

        # `header.types_size` does not match size of `body.types_section`
        HexBytes("0xef0001010008020001000303000400000000013050000bad60a7"),

        # undefined instruction (opcode) in code_section
        HexBytes("0xef0001010004020001000503000100000000016003565b00ef"),
        HexBytes("0xef00010100040200010007030001000000000160016003575b00ef"),
        HexBytes("0xef0001010004020001000503000100000000016003565b00ef"),
        HexBytes("0xef00010100040200010001030004000000000530503050000bad60a7"),

        # no terminating instruction for code in code_section
        HexBytes("0xef000101000802000200030001030004000000000100010001b00001300bad60a7"),  # noqa: E501
        HexBytes("0xef00010100040200010003030004000000000130ef000bad60a7"),

        # invalid max_stack_height
        HexBytes("0xef000101000c0200030029000b001f0300040000000400000a000a00640064b00002b00002b00002b00002b00002b00002b00002b00002b00002b00002b00001b00001303030300030303030303030303030b1b00001b00001b00001b00001b00001b00001b00001b00001b00001b00001b10bad60a7"),  # noqa: E501

        # truncated immediate
        HexBytes("0xef0001010004020001000303000400000000013050620bad60a7"),

        # invalid `terminator` value in header
        HexBytes("0xef00010100040200010003030001ff00000001305000ef"),

        # invalid `magic` value in header
        HexBytes("0xef020101000402000100030300010000000001305000ef"),

        # invalid `version` value in header
        HexBytes("0xef000001000402000100030300010000000001305000ef"),
        HexBytes("0xef000201000402000100030300010000000001305000ef"),

        # many invalid values / value mapping does not match expected indexes
        HexBytes("0xef000102000100030100040300010000000001305000ef"),
        HexBytes("0xef000102000100030300010100040000000001305000ef"),
        HexBytes("0xef000102000100030300010000000001305000ef"),
        HexBytes("0xef000101000402000100030000000001305000ef"),
        HexBytes("0xef00010100040200010003030001ff00000001305000ef"),
    ],
)
def test_invalid_eof_model(invalid_eof_bytecode):
    with pytest.raises(Exception):
        EOFContainerV1.from_bytecode(invalid_eof_bytecode)
